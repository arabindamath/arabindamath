


C Programs
 1. Romberg Integration of a given function using Trapezoidal Rule

 #include<stdio.h>
 #include<math.h>
 int main() {
    float a,b,h,error=1,eps=1e-5,I[10][10];
    int n=1,j=0,k,l,maxrow;
    float trap(float a, float h, int n);
    float f(float x);
    printf("Enter the limits a and b: ");
    scanf("%f %f",&a,&b);
    printf("Enter max. number of rows to be computed: ");
    scanf("%d",&maxrow);
    h=b-a;
    I[0][0]=h*(f(a)+f(b))/2;
    printf("Romberg integration table\n\n");
    while((error>eps) && (j<maxrow)) {
        j++; h/=2; n*=2;
        I[j][0]=trap(a,h,n);
        for(k=1;k<=j;k++)
            I[j][k]=I[j][k-1]+(I[j][k-1]-I[j-1][k-1])/(pow(4,k)-1);
        for(l=0;l<=j;l++)
            printf("\t%f\t",I[j][l]);
        printf("\n");
        error=fabs(I[j-1][j-1]-I[j][j]);
    }
    if(error<eps)
        printf("The value of the integration is %f ",I[j][j]);
    else {
        printf("The result does not achieve the desired accuracy");
        printf("\nthe best approximation is %f ",I[j][j]);
    }
 }
 float f(float x){
    return(x*exp(x));
 }
 float trap(float a, float h, int n){
    float sum=0;
    int i;
    for(i=1;i<=n-1;i++) sum+=f(a+i*h);
    sum=(f(a)+f(a+n*h)+2*sum)*h/2;
    return(sum);
 }   


       
          ******OUTPUT****** 
 
Enter the limits a and b: 0, 1  
Enter max. number of rows to be computed: 4  
Romberg integration table  
 
1.091751  1.002621    
1.023064  1.000169  1.000005  
1.005774  1.000011  1.000000  1.000000 
 
The value of the integration is 1.000000  



2.solution of the linear equations by Gauss Seidal Method

 #include<stdio.h>
 #include<math.h>
 int main(){
    float a[10][10], b[10], x[10], xn[10], eps=0.000001, sum;
    int i, j, n, flag;
    printf("Enter the number of variables: ");
    scanf("%d", &n);
    printf("Enter the coefficient row wise:\n");
    for(i=1; i<=n; i++)
        for(j=1; j<=n; j++)
            scanf("%f", &a[i][j]);
    
    printf("Enter the right hand vector\n");
    for(i=1; i<=n; i++)
        scanf("%f", &b[i]);
    
    // setting initial solution as 0
    for(i=0; i<=n; i++)
        x[i] = 0;
     do{
        for(i=1; i<=n; i++){
            sum = b[i];
            for(j=1; j<=n; j++){
                if(j<i)
                    sum -= a[i][j]*xn[j];
                else if(j>i)
                    sum -= a[i][j]*x[j];
                xn[i] = sum/a[i][i];
            }
        }
        flag=0;
        for(i=1; i<=n; i++)
            if(fabs(x[i]-xn[i]) > eps)
                flag = 1;
        
        if(flag == 1)
            for(i=0; i<=n; i++)
                x[i] = xn[i];
     } while(flag == 1);
     
     printf("solution is:\n");
     for(i=1; i<=n; i++)
        printf("%f ", xn[i]);
     
}


******OUTPUT******

Enter the no of variables: 3  
Enter the co efficient row wise  
8 1 -1  
1 -7 2
2 1 9   
Enter the right-hand vector  
8   -4   12  
solution is  
1.000000  
1.000000  
1.000000 


 3. solution of am IVP of 2nd order by 4th order Runge Kutta Method

 #include<stdio.h>
 #include<math.h>
 int main(){
    float x0,y0,z0,xn,h,x,y,z,k1,k2,k3,k4,n1,n2,n3,n4;
    float f(float x, float y, float z);
    float g(float x, float y, float z);
    printf("Enter the initial value of x,y and z: ");
    scanf("%f%f%f",&x0,&y0,&z0);
    printf("Enter the last value of x: ");
    scanf("%f",&xn);
    printf("Enter the step length: ");
    scanf("%f",&h);
    y=y0;
    z=z0;
    printf("x value \t y value \t z value\n");
    for(x=x0;x<xn;x+=h){
        k1=h*f(x,y,z);
        n1=h*g(x,y,z);
        k2=h*f(x+h/2, y+k1/2,z+n1/2);
        n2=h*g(x+h/2,y+k1/2,z+n1/2);
        k3=h*f(x+h/2,y+k2/2,z+n2/2);
        n3=h*g(x+h/2,y+k2/2,z+n2/2);
        k4=h*f(x+h,y+k3,z+n3);
        n4=h*g(x+h,y+k3,z+n3);
        y=y+(k1+2*(k2+k3)+k4)/6;
        z=z+(n1+2*(n2+n3)+n4)/6;
        printf("%f\t%f\t%f\n",x+h,y,z);
    }
 }
 float f(float x, float y, float z){
    return(z);
 }
 float g(float x, float y, float z){
    return (0.5*(45*exp(2*x) + 5*z + 3*y));
 }

******OUTPUT****** 
Enter the initial value of x,y and z: 0, 2, 1  
Enter the last value of x: 0.1  
Enter the step length: 0.1  
x value
0.100000    
y value     
2.261217  
z value  
4.459068


 4. solution of parabolic equation in two variables by explicit Schmidt method

 #include <stdio.h>
 #include <math.h>
 #define x 8
 #define t 5
 float fun(int a){
    return (4*a - (a*a) / 2);
 }
 int main(){
    float u[x+1][t+1], h = 1.0, k = 0.125, c, al, us, ue;
    int i, j;
    printf("enter the square value of c: ");
    scanf("%f", &c);
    al = c * k / pow(h, 2);
    printf("enter the value of u(0,t): ");
    scanf("%f", &us);
    printf("enter the value of u(%d,t): ", x);
    scanf("%f", &ue);
    for(j=0; j <= t; j++){
        u[0][j] = us;
        u[x][j] = ue;
    }
    for(i = 0; i <= x - 1; i++) {
        u[i][0] = fun(i);
    }
    for(j = 0; j <= t - 1; j++) {
        for(i = 1; i <= x - 1; i++) {
            u[i][j+1] = al * u[i-1][j] + (1-2*al) * u[i][j] + al * u[i+1]
 [j];
        }
    }
    
    printf("the value of u(i,j) are:");
    for(j = 0; j < t; j++) {
        for(i = 0; i < x; i++) {
            if(i % 8 == 0) 
                printf("\n");
            printf("%6.4f\t", u[i][j]);
        }
    }
 }

*****OUTPUT***** 
 
Enter the square value of c: 4 
Enter the value of u(0,t): 0.0 
The value of u(8,t): 0.0 
 
the value of u(i,j) are 
 
0.0000 4.0000 6.0000 8.0000 8.0000 8.0000 6.0000 4.0000
  
0.0000 3.0000 6.0000 7.0000 8.0000 7.0000 6.0000 3.0000
  
0.0000 3.0000 5.0000 7.0000 7.0000 7.0000 5.0000 3.0000
  
0.0000 2.5000 5.0000 6.0000 7.0000 6.0000 5.0000 2.5000
  
0.0000 2.5000 4.2500 6.0000 6.0000 6.0000 4.2500 2.5000


 5. Matrix inverse using Gauss-Jordan Method

 #include <stdio.h>
 #include <math.h>
 #include <stdlib.h>
 #define zero 0.00001
 int main(){
    int n, m, k, i, j;
    float a[10][20], temp;
    printf("\n Enter the size of the matrix: ");
    scanf("%d", &n);
    printf("Enter elements row wise\n");
    for(i = 1; i <= n; i++)
        for(j = 1; j <= n; j++)
            scanf("%f", &a[i][j]);
    for(i = 1; i <= n; i++)
        for(j = 1; j <= n; j++)
            a[i][n+j] = 0;
    for(i = 1; i <= n; i++)
        a[i][n+i] = 1;
    m = 2*n;
    for(k = 1; k <= n; k++){
        temp = fabs(a[k][k]);
        j = k;
        for(i = k+1; i <= n; i++)
            if(temp < fabs(a[i][k])){
                temp = fabs(a[i][k]);
                j = i;
            }
        if(fabs(a[j][k]) <= zero){
            printf("The matrix is singular and is not invertible");
            exit(0);
        }
        if(j != k){
            for(i = 1; i <= m; i++){
                temp = a[j][i];
                a[j][i] = a[k][i];
                a[k][i] = temp;
            }
        }
        if(a[k][k] != 1){
            temp = a[k][k];
            for(i = 1; i <= m; i++)
                a[k][i] /= temp;
        }
        for(j = k+1; j <= n; j++){
            temp = a[j][k];
            for(i = 1; i <= m; i++)
                a[j][i] -= temp * a[k][i];
        }
    }
    for(k = 2; k <= n; k++){
        for(j = k-1; j >= 1; j--){
            temp = a[j][k];
            for(i = 1; i <= m; i++)
                a[j][i] -= temp * a[k][i];
        }
    }
    printf("\nThe inverse matrix is \n");
    for(i = 1; i <= n; i++){
        for(j = n+1; j <= m; j++){
            printf("%f\t", a[i][j]);
        }
        printf("\n");
    }
 } 

Enter the size of the matrix: 3  
Enter elements row wise  
1 3 2
1 2 3
2 -1 4 
The inverse matrix is  
  
1.571429 -2.000000  0.714286 
0.285714  0.000000  -0.142857 
-0.714286  1.000000  -0.142857


6. solution of one dimensional wave equation by finite difference method ( Hyperbolic PDE)

 #include <stdio.h>
 #include <math.h>
 #define x 5
 #define T 8
 int main(){
    float u[x+1][T+1], c, ut, ue, fun(float);
    int i, j;
    printf("Enter the value of c: ");
    scanf("%f", &c);
    printf("Enter the value of ut and ue: ");
    scanf("%f%f", &ut, &ue);
    for(j = 0; j <= T; j++){
        u[0][j] = ut;
        u[x][j] = ue;
    }
    for(i = 1; i <= x-1; i++)
        u[i][0] = fun(3.14*i*0.2);
    for(i = 1; i <= x-1; i++)
        u[i][1] = 0.125 * (u[i-1][0] + u[i+1][0]) + 0.75*u[i][0];
    for(j = 1; j <= T-1; j++)
        for(i = 1; i <= x-1; i++)
            u[i][j+1] = c*c*u[i-1][j] + c*c*u[i+1][j] + 2*(1-c*c)*u[i][j] - 
u[i][j-1];
    printf("the value of u[i][j] are: \n");
    for(j = 0; j <= T-3; j++){
        for(i = 0; i <= x; i++){
            printf("%10.4f\t", u[i][j]);
        }
        printf("\n");
    }
 }
 float fun(float y){
    return (0.5 * sin(y));
 }

******OUTPUT****** 
  
 
 
Enter the value of c: 0.5  
Enter the value of ut and ue: 0, 0  
 
the value of u[i][j] are:  
0.0000 0.2938  0.4754  0.4757  0.2944 0.0000  
0.0000 0.2798  0.4528 0.4530  0.2803  0.0000  
0.0000  0.2391  0.3869 0.3871  0.2392  0.0000  
0.0000  0.1755  0.2841  0.2841  0.1754  0.0000  
0.0000 0.0953 0.1542  0.1540  0.0948  0.0000  
0.0000 0.0059  0.0095  0.0091  0.0054  0.0000

 7. Elliptic type PDE

 #include <stdio.h>
 #include <math.h>
 int main(){
    int i, j, n;
    float u[6][6], un[6][6], h, k;
    float g(float x, float y);
    float f1(float x);
    float f2(float y);
    float f3(float x);
    float f4(float y);
    printf(" Enter the sub intervals n: ");
    scanf("%d", &n);
    printf(" Enter the step lengths h and k: ");
    scanf("%f%f", &h, &k);
    
    // set the boundary conditions
    for(i = 0; i <= n; i++)
        for(j = 0; j <= n; j++)
            u[i][j] = 0;
    for(i = 0; i <= n; i++){
        u[i][0] = f1(i*h);
        u[i][n] = f3(i*h);
    }
    for(j = 0; j <= n; j++){
        u[0][j] = f2(j*k);
        u[n][j] = f4(j*k);
    }
    for(i = 0; i <= n; i++)
        for(j = 0; j <= n; j++)
            un[i][j] = u[i][j];
    for(i = 1; i < n; i++)
        for(j = 1; j <= n; j++)
            un[i][j] = u[i][j];
        for(i = 1; i < n; i++)
            for(j = 1; j < n; j++)
                un[i][j] = 0.25*((un[i-1][j] + u[i+1][j] + un[i][j-1] + 
u[i][j+1])- h*h*g(i*h, j*k));
    
    printf("The solution at different points are \n");
    for(i = 0; i <= n; i++){
        printf("%8.5f", i*h);
    }
    
    printf("\n-----------------------\n");
    for(i = 0; i <= n; i++){
        printf("%8.5f|", i * k);
        for(j = 0; j <= n; j++){
            printf("%8.5f", un[i][j]);
        }
        printf("\n");
    }
 }
 float g(float x, float y){
    return (-2*x*x + y*y);
 }
 float f1(float x){
    return (0);
 }
 float f2(float y){
    return (0);
 }
 float f3(float x){
    return (0);
 }
 float f4(float y){
    return (0);
 }


******OUTPUT****** 
Enter the sub intervals n: 5  
Enter the step lengths h and k: 0.5 0.1  
The solution at different points are  
0.00000 0.50000 1.00000 1.50000 2.0000 2.50000 

0.00000|   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000  
0.10000|   0.00000   0.03063   0.03641   0.03473   0.02993   0.00000  
0.20000|   0.00000   0.13203   0.16461   0.16921   0.16479   0.00000  
0.30000|   0.00000   0.31363   0.39831   0.41750   0.41682   0.00000  
0.40000|   0.00000   0.57778   0.74152   0.78413   0.79024   0.00000  
0.50000|   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000

 8. solution of an IVP of 1st order by Milne’s method

 #include <stdio.h>
 #include <math.h>
 int main(){
    float x0, y0, xn, h, y1, y2, y3, yc, yp;
    float eps = 1e-5;
    float x1, x2, x3, x4, f0, f1, f2, f3, yold;
    float f(float x, float y);
    float rk4(float x, float y, float h);
    printf("Enter the initial value of x and y: ");
    scanf("%f %f", &x0, &y0);
    printf("Enter the last value of x: ");
    scanf("%f", &xn);
    
    printf("Enter the step length h: ");
    scanf("%f", &h);
    printf("x- value y-value \n");
    x1 = x0 + h;
    x2 = x1 + h;
    x3 = x2 + h;
    y1 = rk4(x0, y0, h);
    y2 = rk4(x1, y1, h);
    y3 = rk4(x2, y2, h);
    f1 = f(x1, y1);
    f2 = f(x2, y2);
    f3 = f(x3, y3);
    for(x4 = x3+h; x4 <= xn; x4 += h){
        yp = y0 + 4*h*(2*f1-f2 + 2*f3) / 3;
        yold = yp;
        yc = yp;
        do{
            yold = yc;
            yc = y2 + h * (f2 + 4*f3 + f(x4, yold)) / 3;
        } while((yc - yold) > eps);
        printf("%8.4f %8.5f\n", x4, yc);
        y0 = y1;
        y1 = y2;
        y2 = y3;
        y3 = yc;
        f1 = f2;
        f2 = f3;
        f3 = f(x4, yc);
    }
 }
 float f(float x, float y){
    return (2*x + y*y);
 }
 float rk4(float x, float y, float h)
 {
    float k1, k2, k3, k4;
    k1 = h * f(x, y);
    k2 = h * f(x + h / 2, y + k1 / 2);
    k3 = h * f(x + h / 2, y + k2 / 2);
    k4 = h * f(x + h, y + k3);
    y = y + (k1 + 2 * (k2 + k3) + k4) / 6;
    return (y);
 }


******OUTPUT****** 
Enter the initial value of x and y: 0, 1  
Enter the last value of x: 0.7  
Enter the step length h: 0.1  
x- value   
0.4000  
0.5000  
0.6000  
y-value  
1.91497  
2.48207  
3.45698


 Program 1: Armstrong Number between two numbers
Code:
#include<iostream>
using namespace std;
int main() {
    int num1, num2, i, num, digit, sum;
    cout << "Enter the first number: ";
    cin >> num1;
    cout << "Enter the last number: ";
    cin >> num2;
    cout << "Armstrong numbers between " << num1 << " and " << num2 << " are:" << endl;
    for(i = num1; i <= num2; i++) {
        sum = 0; num = i;
        while(num > 0) {
            digit = num % 10;
            sum += digit * digit * digit;
            num /= 10;
        }
        if(sum == i)
            cout << i << "\t";
    }
    return 0;
}
Output:
Enter the first number: 100
Enter the last number: 1000
Armstrong numbers between 100 and 1000 are:
153     370     371     407


//Armstrong number in range

#include <iostream>
#include <cmath>
using namespace std;

int main()
 {
    int i,n1,n2; 
    cout<<"Enter the two numbers:";
    cin >> n1>>n2;
    for (i=n1;i<=n2; i++) 
	{
        int sum = 0,num = i,n = 0;
        while (num) { n++; num /= 10; }
        num= i;
        while (num) 
		{
            sum += pow(num% 10,n);
            num /= 10;
        }
        if (sum == i) cout << i << " ";
    }
    return 0;
}


 Program 2: Factorial of a Number
Code:
#include<iostream>
using namespace std;
int main() {
    int i, n, fact = 1;
    cout << "Enter any number: ";
    cin >> n;
    if(n == 0)
        cout << "The factorial is 1" << endl;
    else {
        for(i = 1; i <= n; i++)
            fact *= i;
        cout << "The factorial of the number " << n << " = " << fact << endl;
    }
    return 0;
}
Output:
Enter any number: 5
The factorial of the number 5 = 120

 Program 3: Largest of Three Numbers
Code:
#include<iostream>
using namespace std;
int main() {
    float n1, n2, n3;
    cout << "Enter the three numbers: ";
    cin >> n1 >> n2 >> n3;
    if(n1 >= n2 && n1 >= n3)
        cout << "The largest number is " << n1;
    else if(n2 >= n1 && n2 >= n3)
        cout << "The largest number is " << n2;
    else
        cout << "The largest number is " << n3;
    return 0;
}
Output:
Enter the three numbers: 12 15 17
The largest number is 17

//largest of n number

#include <iostream>
using namespace std;

int main() 
{
    int n,largest,num;
    cout << "Enter number of elements: ";
    cin >> n;
    cout << "Enter number 1: ";
    cin >> largest;

    for(int i = 2; i <= n; i++) 
	{
        cout << "Enter number " << i << ": ";
        cin >> num;
        if(num > largest) 
		{
            largest = num;
        }
    }
    cout<<"Largest number is:"<<largest<<endl;
    return 0;
}

Program 4: Find LCM and HCF
Code:
#include<iostream>
using namespace std;
int main() {
    int n1, n2, hcf, temp, lcm;
    cout << "Enter two numbers: ";
    cin >> n1 >> n2;
    int a = n1, b = n2;
    while(n2 != 0) {
        temp = n2;
        n2 = n1 % n2;
        n1 = temp;
    }
    hcf = n1;
    lcm = (a * b) / hcf;
    cout << "HCF = " << hcf << endl;
    cout << "LCM = " << lcm << endl;
    return 0;
}
Output:
Enter two numbers: 12   156
HCF = 12
LCM = 156

//LCM & HCF
#include <iostream>
using namespace std;

int main() 
{
    int a, b, hcf, lcm, num1, num2;
    cout << "Enter two numbers: ";
    cin  >> a >> b;
    num1 = a;
    num2 = b;
    //Find HCF using the subtraction method
    while(a != b) 
	{
        if(a > b)
            a = a - b;
        else
            b = b - a;
    }
    hcf = a; //or b, since a==b
    lcm = (num1 * num2) / hcf;
    cout << "HCF = " << hcf << endl;
    cout << "LCM = " << lcm << endl;
    return 0;
}



C Program 5: Leap Year Testing
Code:
#include<iostream>
using namespace std;
int main() {
    int year;
    cout << "Enter any year: ";
    cin >> year;
    if((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
        cout << "The given year " << year << " is a leap year";
    else
        cout << "The given year " << year << " is not a leap year";
    return 0;
}
Output:
Enter any year: 1900
The given year 1900 is not a leap year


C Program 6: Palindrome Number check
Code:
#include<iostream>
using namespace std;
int main() {
    int num, temp, digit, sum = 0;
    cout << "Enter the number: ";
    cin >> num;
    temp = num;
    while(num != 0) {
        digit = num % 10;
        sum = (sum * 10) + digit;
        num /= 10;
    }
    if(sum == temp)
        cout << "The number is a palindrome";
    else
        cout << "The number is not a palindrome";
    return 0;
}
Output:
Enter the number: 13131
The number is a palindrome

C Program 7: Prime Number Check
Code:
#include<iostream>
using namespace std;
int main() {
    int num, i, check = 0;
    cout << "Enter a number: ";
    cin >> num;
    for(i = 2; i < num; i++) {
        if(num % i == 0) {
            check = 1;
            break;
        }
    }
    if(check == 0)
        cout << "The number is prime" << endl;
    else
        cout << "The number is not prime" << endl;
    return 0;
}
Output:
Enter a number: 19
The number is prime

//prime or not

#include<iostream>
using namespace std;
int main()
{
	int n,i=2;
	cout<<"Enter the number:";
	cin>>n;
	while(i<n && n%i != 0) i++;
	cout<<(n>1 && n==i ? "Prime" : "Not prime");
	return 0;
}

C Program 8: Sum of First n Natural Numbers
Code:
#include<iostream>
using namespace std;
int main() {
    int i, n, sum = 0;
    cout << "Enter the integer: ";
    cin >> n;
    for(i = 1; i <= n; i++) {
        sum += i;
        cout << i << "+";
    }
    cout << "\b= " << sum << endl;
    return 0;
}
Output:
Enter the integer: 10
1+2+3+4+5+6+7+8+9+10= 55

c program 9 prime no. between two number
#include <iostream>
using namespace std;

// Function to check if a number is prime
bool isPrime(int num) {
    if (num <= 1) return false;
    for (int i = 2; i * i <= num; ++i)
        if (num % i == 0)
            return false;
    return true;
}

int main() {
    int start, end;

    cout << "Enter the starting number: ";
    cin >> start;

    cout << "Enter the ending number: ";
    cin >> end;

    cout << "Prime numbers between " << start << " and " << end << " are:\n";

    for (int i = start; i <= end; ++i) {
        if (isPrime(i)) {
            cout << i << " ";
        }
    }

    cout << endl;
    return 0;
}

//prime in range

#include<iostream>
using namespace std;

int main() 
{
    int a,b,n;
    cout<<"Enter the range:";
    cin>>a>>b;
    for(n=a;n<=b;n++) 
	{
       if(n>=2) 
		{	int i=2;	
            while (i < n && n%i !=0 ) i++;
            if (i==n) cout << n << " ";
        }
    }
    return 0;
}

c program 10 palindrome no. between two number

#include <iostream>
using namespace std;

// Function to check if a number is palindrome
bool isPalindrome(int num) {
    int original = num, reversed = 0;

    while (num > 0) {
        int digit = num % 10;
        reversed = reversed * 10 + digit;
        num = num / 10;
    }

    return original == reversed;
}

int main() {
    int start, end;

    cout << "Enter the starting number: ";
    cin >> start;

    cout << "Enter the ending number: ";
    cin >> end;

    cout << "Palindrome numbers between " << start << " and " << end << " are:\n";

    for (int i = start; i <= end; ++i) {
        if (isPalindrome(i)) {
            cout << i << " ";
        }
    }

    cout << endl;
    return 0;
}

 //Pelindrome in range
#include <iostream>
using namespace std;

int main() 
{
    int start,end,n,sum,num,digit;
    cout<<"Enter the range:";
    cin>>start>>end;

    for(n=start;n<=end;n++) 
	{
        sum=0,num=n;
		int temp=n; 
        while(temp!=0)
		{
			digit=temp%10;
            sum= (sum*10)+digit;
            temp=temp/10;
        }
        if(sum==num)
           cout<<sum<<" ";
    }
    cout<<"\n";
    return 0;
}


MATLAB 
MATLAB Program 1:  Find Eigenvalues of a Matrix 
MATLAB Code: 
A = [1 7 3; 2 9 12; 5 22 7]; 
S = eig(A) 
Output: 
25.5548 -0.5789 -7.9759 


MATLAB Program 2: Parametric Plot and Function Plot 
MATLAB Code: 
xt = @(t) cos(3*t); 
yt = @(t) sin(2*t); 
fplot(xt, yt) 
f = @(x) (exp(-x)./x) - (exp(-(2+x))./(2+x)); 
x = 10:0.1:50; 
plot(x, f(x)) 

Output: 
A figure window opens with two plots as follows. 


MATLAB Program 3: Solve General Quadratic Equation 
MATLAB Code: 
syms x 
eqn = a*x^2 + b*x + c==0; 
solx = solve(eqn,x) 
Output: 
solx = 
  -(b + (b^2 - 4*a*c)^(1/2))/(2*a) -(b - (b^2 - 4*a*c)^(1/2))/(2*a) 
 
MATLAB Program 4: Solve Power Equation 
MATLAB Code: 
syms x 
eqn = x^5 == 3125; 
S = solve(eqn, x) 
Output: 
 
                                                        5 
-(2^(1/2)*(5 - 5^(1/2))^(1/2)*5i)/4 - (5*5^(1/2))/4 - 5/4 
  (2^(1/2)*(5 - 5^(1/2))^(1/2)*5i)/4 - (5*5^(1/2))/4 - 5/4 
  (5*5^(1/2))/4 - (2^(1/2)*(5^(1/2) + 5)^(1/2)*5i)/4 - 5/4 
  (5*5^(1/2))/4 + (2^(1/2)*(5^(1/2) + 5)^(1/2)*5i)/4 - 5/4 
  
 
MATLAB Program 5: Solve Trigonometric Equation 
MATLAB Code: 
syms x 
eqn = cos(x) == x^2 - 1; 
S = solve(eqn, x) 
Output: 
S = 
  -1.176501939901832400447377268731 

MATLAB Program 6: Solve a quadratic Equation 
MATLAB Code: 
syms x 
eqn =3*x^2+5*x+2==0; 
S=solve(eqn,x) 
Output: 
 
 S = 
  
  -1 -2/3 
MATLAB Program 7: Solve a cubic equation 
 
 MATLAB Code: 
syms x 
eqn =3*x^3-5*x-14==0; 
S=solve(eqn,x) 
Output: 
S = 
  
                   2 - (3^(1/2)*2i)/3 - 1 
  (3^(1/2)*2i)/3 - 1 

MATLAB Program 8: Solve system of three linear Equations in three Variables 
MATLAB Code: 
syms x y z 
eqn1 = 2*x + y + z == 2; 
eqn2 = -x + y - z == 3; 
eqn3 = x + 2*y + 3*z == -10; 
sol = solve([eqn1, eqn2, eqn3], [x, y, z]); 
xSol = sol.x 
ySol = sol.y  
zSol = sol.z
Output: 
x = 3, y = 1, z = -5 

MATLAB Program 9: Find inverse of a Matrix 
MATLAB Code: 
A = [1 0 2; -1 5 0; 0 3 -9]; 
I = inv(A) 
Output: 
 I = 
 
    0.8824   -0.1176    0.1961 
    0.1765    0.1765    0.0392 
    0.0588    0.0588   -0.0980 



Problem-1:  Plot the differential equation 〖dy〗_1/dt= y2 , 〖dy〗_2/dt= (1-y12) y2 -y1 with initial guess [2 0] at t=0 using MATLAB

MATLAB code:

%initial guess[2 0]

function dy = zin(t,y)
dy=zeros(2,1);
dy(1)=y(2);
dy(2)=(1-(y(1)).^2)*y(2)-y(1);
end
%run file

tspan=[0 20];
y0=[2 0];
[t,ya]= ode45(@zin,tspan,y0);
figure
plot(t,ya(:,1),'b')
xlabel('t');
ylabel('y_1');
figure
plot(ya(:,1),ya(:,2));
xlabel('y_1');
ylabel('y_2');
figure
plot(t,ya(:,2));
xlabel('t');
ylabel('y_2');


Problem-2:  Plot the differential equation 〖dy〗_1/dt= -y2 , 〖dy〗_2/dt= y1 with initial guess [2 0] at t=0 using MATLAB

MATLAB code:
%initial guess [2 2]
function dy=zin2(t,y)
dy=zeros(2,1);
dy(1)=-y(2);
dy(2)=y(1);
end
%run file

tspan=[0 20]
y0=[2 2];
[t,ya]=ode45(@zin2,tspan,y0);
figure
plot(t,ya(:,1),'b')
xlabel('t');
ylabel('y_1');
figure
plot(ya(:,1),ya(:,2))
xlabel('y_1');
ylabel('y_2');
figure
plot(t,ya(:,2));
xlabel('t');
ylabel('y_2');

Problem-3:  Plot the Lotka-volterra predator-prey model 
                                                          〖dy〗_1/dt= -y1 -0.01y1y2                                                                                                      					〖dy〗_2/dt= 0.02y1y2-y2                                                                                                                               with initial guess [50 50] at t=0 using MATLAB.


MATLAB code:
function dy=zin3(t,y)
dy=zeros(2,1);
dy(1)=y(1)-0.01*y(1)*y(2);
dy(2)=0.02*y(1)*y(2)-y(2);
end

%run file

tspan=[0 15];
y0=[50 50];
[t,ya]=ode45(@zin3,tspan,y0);
figure
plot(t,ya(:,1),'b')
xlabel('t');
ylabel('y_1');
figure
plot(ya(:,1),ya(:,2));
xlabel('y_1');
ylabel('y_2');
figure
plot(t,ya(:,2));
xlabel('t');
ylabel('y_2');


Problem-4:  Plot the Damped Nonlinear oscillator equation 
                                                          〖dy〗_1/dt= y2    
                                         〖dy〗_2/dt =  1/5 y2 – sin(y1)      with initial guess [0 3] at t=0 using MATLAB

MATLAB code:

function dy=zin4(t,y)
dy=zeros(2,1);
dy(1)=y(2);
dy(2)= -(1/5)*y(2)-sin(y(1));
end
%run file

tspan=[0 40];
y0=[0 3];
[t,ya]=ode45(@zin4,tspan,y0);
figure
plot(t,ya(:,1),'b')
xlabel('t');
ylabel('y_1');
figure
plot(ya(:,1),ya(:,2));
xlabel('y_1');
ylabel('y_2');
figure
plot(t,ya(:,2));
xlabel('t');
ylabel('y_2');


Problem-5:  Plot the Lorenz equation 
                                                          〖dy〗_1/dt=  8/3 y1+y2 y3                   
                                                       〖dy〗_2/dt  =  -10 y2 +10y3 
                                                  〖dy〗_3/dt=- y1 y2 + 28y2 -y3                            with initial guess y0= [0; 0;1e-10] at t=0 using MATLAB
Where,  1e-10==10-10

MATLAB code:
function dy=zin5(t,y)
dy=zeros(3,1);
dy(1)=-(8/3)*y(1)+y(2)*y(3);
dy(2)=-10*y(2)+10*y(3);
dy(3)=-y(1)*y(2)+28*y(2)-y(3);
end
%run file

tspan=[0 100];
y0=[0;0;1e-10];
[t,ya]=ode45(@zin5,tspan,y0);
figure
plot(t,ya(:,1),'b')
xlabel('t');
ylabel('y_1');

figure
plot(t,ya(:,2));
xlabel('t');
ylabel('y_2');

figure
plot(t,ya(:,3),'b');
xlabel('t');
ylabel('y_3');

figure
plot(ya(:,1),ya(:,2));
xlabel('y_1');
ylabel('y_2');

figure
plot(ya(:,2),ya(:,3));
xlabel('y_2');
ylabel('y_3');

figure
plot(ya(:,3),ya(:,1));
xlabel('y_3');
ylabel('y_1');



1. Plot the following Cosine functions y1=2cosx,y2=cosx and y3=0.5cosx 
x=0:0.01:2*pi; 
y1=2*cos(x); 
y2=cos(x); 
y3=0.5*cos(x); 
plot(x,y1,'-r',x,y2,'*k',x,y3,'+g'); 
legend('2cos(x)','cos(x)','0.5*cos(x)'); 
xlabel('x'); 
ylabel('y'); 
title('cosine function'); 
grid on; 


2. Plot sin(x), sin(2x), sin(3x) in [0, 2π] 
x=[0:0.01:2*pi]; 
y1=sin(x); 
y2=sin(2*x); 
y3=sin(3*x); 
plot(x,y1,'-r',x,y2,'*k',x,y3,'+g'); 
legend('sinx','sin2x','sin3x'); 
xlabel('x'); 
ylabel('y'); 
grid on; 

3. Plot sin(t), cos(t) in [0, 4π] 
=[0:0.01:4*pi]; 
y1=sin(t); 
y2=cos(t); 
plot(t,y1,'-b',t,y2,'*g'); 
legend('sint','cost'); 
title('sine and cosine in [0,4pi]'); 
grid on; 

4. Plot y = sin(x²), y = log(x) 
x = [0:0.01:4*pi] 
y1 = sin(x.^2); 
y2 = log(sqrt(sqrt(x))); 
plot(x, y1, 'b-', x, y2, 'r--'); 
text(3,-1,'y = sin(x^2)'); 
text(1,0,'y = log(sqrt(x))'); 
legend('sin(x^2)', 'log(sqrt(x)'); 
xlabel('x'); ylabel('y'); title('Graphs of sin(x^2) and log(sqrt(x))');


5. Parametric plot of sin(t), cos(t) in [0, 4π] 
t=[0:0.01:4*pi]; 
y1=sin(t); 
y2=cos(t); 
figure 
plot(t,y1,'*b',t,y2,'-g'); 
legend('sint','cost'); 
title('parametric plot'); 
grid on; 

6. Create graph with 4 subplots 
x=[0:0.01:2*pi]; 
subplot(2,2,1); 
y1=sin(x); 
plot(x,y1); 
title('sinx'); 
subplot(2,2,2); 
y2=sin(2*x); 
plot(x,y2); 
title('sin2x'); 
subplot(2,2,3); 
y3=sin(4*x); 
plot(x,y3); 
title('sin4x'); 
subplot(2,2,4) 
y4=sin(8*x); 
plot(x,y4); 
title('sin8x'); 

7. Inverse of matrix A and solve system 
A = [1 2 3; 4 5 6; 7 8 0]; 
A_inv = inv(A); 
disp('Inverse of matrix A:') 
disp(A_inv) 
B = [1; 1; 1]; 
X2 = A \ B; 
disp('Solution using backslash operator:') 
disp(X2)

8. User-defined function to solve quadratic equation 
function roots = quadroots(a, b, c) 
D = b^2 - 4*a*c; 
roots(1) = (-b + sqrt(D)) / (2*a); 
roots(2) = (-b - sqrt(D)) / (2*a); 
end 
% Call the function 
r = quadroots(1, 5, 6) 
disp('Roots of x^2 + 5x + 6 = 0 are:'); 
disp(r);
 