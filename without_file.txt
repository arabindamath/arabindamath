// PROGRAM OF THE ROMBERG INTEGRATION OF A GIVEN FUNCTION USING TRAPIZOIDAL RULE

#include <stdio.h>
#include <math.h>

int main()
{
    float a, b, h, error = 1, eps = 1e-5, I[10][10];
    int n = 1, j = 0, k, l, maxrow;

    float trap(float a, float h, int n);
    float f(float x);

    printf("Enter the limits a and b: ");
    scanf("%f %f", &a, &b);

    printf("Enter max. number of rows to be computed: ");
    scanf("%d", &maxrow);

    h = b - a;
    I[0][0] = h * (f(a) + f(b)) / 2;

    printf("\t\t******OUTPUT******\n\n");
    printf("Romberg integration table\n\n");
    while ((error > eps) && (j < maxrow))

    {
        j++;
        h /= 2;
        n *= 2;
        I[j][0] = trap(a, h, n);
        for (k = 1; k <= j; k++)
            I[j][k] = I[j][k - 1] + (I[j][k - 1] - I[j - 1][k - 1]) / (pow(4, k) - 1);
        for (l = 0; l <= j; l++)
        {
            printf("\t%f\t", I[j][l]);
        }
        printf("\n");
        error = fabs(I[j - 1][j - 1] - I[j][j]);
    }

    if (error < eps)
    {
        printf("The value of the integration is %f ", I[j][j]);
    }
    else
    {
        printf("The result does not achieve the desired accuracy");
        printf("\nthe best approximation is %f ", I[j][j]);
    }
}

/* definition of the function f(x) */
float f(float x)
{
    return (x * exp(x));
}

/* function for the trapezoidal rule */
float trap(float a, float h, int n)
{
    float sum = 0;
    int i;
    for (i = 1; i <= n - 1; i++)
        sum += f(a + i * h);
    sum = (f(a) + f(a + n * h) + 2 * sum) * h / 2;
    return (sum);
}






// ******OUTPUT******
// Enter the limits a and b: 0, 1
// Enter max. number of rows to be computed: 4
// Romberg integration table
// 1.091751	 1.002621
// 1.023064 	1.000169 	1.000005
// 1.005774 	1.000011 	1.000000 	1.000000
// The value of the integration is 1.000000
//  









// // PROGRAMM FOR GAUSS SEIDAL METHOD

// #include <stdio.h>
// #include <math.h>
// int main()
// {
//     float a[10][10], b[10], x[10], xn[10], eps = 0.000001, sum;
//     int i, j, n, flag;
//     printf("Enter the no of variables: ");
//     scanf("%d", &n);

//     printf("Enter the co efficient row wise\n");
//     for (i = 1; i <= n; i++)
//         for (j = 1; j <= n; j++)
//             scanf("%f", &a[i][j]);

//     printf("Enter the right-hand vector: ");
//     for (i = 1; i <= n; i++)
//         scanf("%f", &b[i]);

//     for (i = 0; i <= n; i++)
//         x[i] = 0;
//     do
//     {
//         for (i = 1; i <= n; i++)
//         {
//             sum = b[i];
//             for (j = 1; j <= n; j++)
//             {
//                 if (j < i)
//                     sum -= a[i][j] * xn[j];
//                 else if (j > i)
//                     sum -= a[i][j] * x[j];
//                 xn[i] = sum / a[i][i];
//             }
//         }

//         flag = 0;
//         for (i = 1; i <= n; i++)
//             if (fabs(x[i] - xn[i]) > eps)
//                 flag = 1;
//         if (flag == 1)
//             for (i = 1; i <= n; i++)
//                 x[i] = xn[i];

//     } while (flag == 1);

//     printf("******OUTPUT******\n\n");
//     // print the row-wise matrix
//     for (i = 1; i <= n; i++)
//     {
//         for (j = 1; j <= n; j++)
//         {
//             printf("%.0f ", a[i][j]);
//         }
//         printf("\n");
//     }
//     printf("\n");

//     // print the right-hand vector
//     for (i = 1; i <= n; i++)
//     {
//         printf("%.0f ", b[i]);
//     }
//     printf("\n");

//     printf("solution is\n");
//     for (i = 1; i <= n; i++)
//     {
//         printf("%10.6f", xn[i]);
//     }
// }




//  
// ******OUTPUT******
// Enter the no of variables: 3
// Enter the co efficient row wise
// 8    1  -1
// 1   -7   2
// 2    1   9
// Enter the right-hand vector
// 8   -4   12
// solution is
// 1.000000 	1.000000	 1.000000
//  






// // RUNGE KUTTA METHOD

// #include <stdio.h>
// #include <math.h>
// int main()
// {
//     float x0, y0, z0, xn, h, x, y, z, k1, k2, k3, k4, n1, n2, n3, n4;
//     float f(float x, float y, float z);
//     float g(float x, float y, float z);

//     printf("Enter the initial value of x,y and z: ");
//     scanf("%f%f%f", &x0, &y0, &z0);

//     printf("Enter the last value of x: ");
//     scanf("%f", &xn);

//     printf("Enter the step length: ");
//     scanf("%f", &h);

//     y = y0;
//     z = z0;

//     printf("******OUTPUT******\n\n");
//     printf("the initial value of x,y and z: %.0f, %.0f, %.0f\n", x0, y0, z0);
//     printf("the last value of x: %.1f\n", xn);
//     printf("the step length: %.1f\n", h);

//     printf("x value \t y value \t z value\n");

//     for (x = x0; x < xn; x += h)
//     {
//         k1 = h * f(x, y, z);
//         n1 = h * g(x, y, z);
//         k2 = h * f(x + h / 2, y + k1 / 2, z + n1 / 2);
//         n2 = h * g(x + h / 2, y + k1 / 2, z + n1 / 2);
//         k3 = h * f(x + h / 2, y + k2 / 2, z + n2 / 2);
//         n3 = h * g(x + h / 2, y + k2 / 2, z + n2 / 2);
//         k4 = h * f(x + h, y + k3, z + n3);
//         n4 = h * g(x + h, y + k3, z + n3);
//         y = y + (k1 + 2 * (k2 + k3) + k4) / 6;
//         z = z + (n1 + 2 * (n2 + n3) + n4) / 6;
//         printf("%f\t%f\t%f\n", x + h, y, z);
//     }
// }

// // DEFINATION OF THE FUNCTION f(x,y,z)
// float f(float x, float y, float z)
// {
//     return (z);
// }
// // definition of the function g(x,y,z)
// float g(float x, float y, float z)
// {
//     return (0.5 * (45 * exp(2 * x) + 5 * z + 3 * y));
// }




//  
// ******OUTPUT******

// Enter the initial value of x,y and z: 0, 2, 1
// Enter the last value of x: 0.1
// Enter the step length: 0.1
// x value  	y value  	z value
// 0.100000 	2.261217 	4.459068
//  








// // PROGRAM FOR PARABOLIC PDE

// #include <stdio.h>
// #include <math.h>

// #define x 8
// #define t 5

// float fun(int a)
// {
//     return (4 * a - (a * a) / 2);
// }

// int main()
// {
//     float u[x + 1][t + 1], h = 1.0, k = 0.125, c, al, us, ue;
//     int i, j;
//     printf("enter the square value of c: ");
//     scanf("%f", &c);

//     al = c * k / pow(h, 2);

//     printf("enter the value of u(0,t): ");
//     scanf("%f", &us);

//     printf("enter the value of u(%d,t): ", x);
//     scanf("%f", &ue);

//     for (j = 0; j <= t; j++)
//     {
//         u[0][j] = us;
//         u[x][j] = ue;
//     }

//     for (i = 0; i <= x - 1; i++)
//     {
//         u[i][0] = fun(i);
//     }

//     for (j = 0; j <= t - 1; j++)
//     {
//         for (i = 1; i <= x - 1; i++)
//         {
//             u[i][j + 1] = al * u[i - 1][j] + (1 - 2 * al) * u[i][j] + al * u[i + 1][j];
//         }
//     }

//     printf("\n***output***\n\n");
//     printf("the square value of c: %.0f\n", c);
//     printf("the value of u(0,t): %.1f\n", us);
//     printf("The value of u(8,t): %.1f\n\n", ue);

//     printf("the value of u(i,j) are\n");
//     for (j = 0; j < t; j++)
//     {
//         for (i = 0; i < x; i++)
//         {
//             if (i % 8 == 0)
//             {
//                 printf("\n");
//             }
//             printf("%6.4f\t", u[i][j]);
//         }
//         printf("\n");
//     }
// }





// *****OUTPUT*****

// Enter the square value of c: 4
// Enter the value of u(0,t): 0.0
// The value of u(8,t): 0.0

// the value of u(i,j) are

// 0.0000	4.0000	6.0000	8.0000	8.0000	8.0000	6.0000	4.0000
// 0.0000	3.0000	6.0000	7.0000	8.0000	7.0000	6.0000	3.0000
// 0.0000	3.0000	5.0000	7.0000	7.0000	7.0000	5.0000	3.0000
// 0.0000	2.5000	5.0000	6.0000	7.0000	6.0000	5.0000	2.5000
// 0.0000	2.5000	4.2500	6.0000	6.0000	6.0000	4.2500	2.5000

//  







// // Program for matrix inverse using GAUSS - JORDAN METHOD

// #include <stdio.h>
// #include <math.h>
// #include <stdlib.h>

// #define zero 0.00001

// int main()
// {
//     int n, m, k, i, j;
//     float a[10][20], temp;

//     // if (fp == NULL)
//     // {
//     // printf("Error opening file!\n");
//     // exit(1);
//     // }

//     printf("\n Enter the size of the matrix: ");
//     scanf("%d", &n);

//     printf("Enter elements row wise\n");
//     for (i = 1; i <= n; i++)
//     for (j = 1; j <= n; j++)
//     scanf("%f", &a[i][j]);

//     // Augmented of the matrix A //
//     for (i = 1; i <= n; i++)
//     for (j = 1; j <= n; j++)
//     a[i][n + j] = 0;
    
//     for (i = 1; i <= n; i++)
//     a[i][n + i] = 1;

//     m = 2 * n;

//     for (k = 1; k <= n; k++)
//     {
//         // Find the pivots elements and its positions //
//         temp = fabs(a[k][k]);
//         j = k; // initial positions //
//         for (i = k + 1; i <= n; i++)

//         if (temp < fabs(a[i][k]))
//         {
//             temp = fabs(a[i][k]);
//             j = i;
//         }
        
//         if (fabs(a[j][k]) <= zero)
//         {
//             printf("The matrix is singular and is not invertible");
//             exit(0);
//         }
        
//         if (j != k) // interchange k and jth row//
//         {
//             for (i = 1; i <= m; i++)
//             {
//                 temp = a[j][i];
//                 a[j][i] = a[k][i];
//                 a[k][i] = temp;
//             }
//         }

//         if (a[k][k] != 1)
//         {
//             temp = a[k][k];
//             for (i = 1; i <= m; i++)
//             a[k][i] /= temp;
//         }
        
//         for (j = k + 1; j <= n; j++)
//         {
//             temp = a[j][k];
//             for (i = 1; i <= m; i++)
//             a[j][i] -= temp * a[k][i];
//         }
//     }
    
//     for (k = 2; k <= n; k++)
//     {
//         for (j = k - 1; j >= 1; j--)
//         {
//             temp = a[j][k];
//             for (i = 1; i <= m; i++)
//             a[j][i] -= temp * a[k][i];
//         }
//     }
    
//     printf("*******OUTPUT*********\n\n");
//     printf("\n the size of the matrix: %d", n);
    
//     printf("\nThe inverse matrix is \n");
//     for (i = 1; i <= n; i++)
//     {
//         for (j = n + 1; j <= m; j++)
//         {
//             printf("%f\t", a[i][j]);
//         }
//         printf("\n");
//     }
// }




//  
// *******OUTPUT*********

// Enter the size of the matrix: 3
// Enter elements row wise
// 1.000000 	3.000000	 2.000000
// 1.000000	 2.000000 	 3.000000
// 2.000000 	-1.000000	 4.000000

// The inverse matrix is
//  1.571429	-2.000000	 0.714286
//  0.285714 	0.000000 	-0.142857
// -0.714286  	1.000000 	-0.142857







// PROGRAM FOR HYPERBOLIC PDE

#include <stdio.h>
#include <math.h>
#include <conio.h>

#define x 5
#define T 8

int main()
{
    float u[x + 1][T + 1], c, ut, ue, fun(float);
    int i, j;

    printf("Enter the value of c: ");
    scanf("%f", &c);

    printf("Enter the value of ut and ue: ");
    scanf("%f%f", &ut, &ue);

    for (j = 0; j <= T; j++)
    {
        u[0][j] = ut;
        u[x][j] = ue;
    }

    for (i = 1; i <= x - 1; i++)
    {
        u[i][0] = fun(3.14 * i * .2);
    }

    for (i = 1; i <= x - 1; i++)
    {
        u[i][1] = 0.125 * (u[i - 1][0] + u[i + 1][0]) + 0.75 * u[i][0];
    }

    for (j = 1; j <= T - 1; j++)
        for (i = 1; i <= x - 1; i++)
    u[i][j + 1] = c * c * u[i - 1][j] + c * c * u[i + 1][j] + 2 * (1 - c * c) * u[i][j] - u[i][j - 1];

    printf("******OUTPUT******\n\n");
    printf("the value of c: %.1f\n", c);
    printf("the value of ut and ue: %.0f, %.0f \n", ut, ue);

    printf("the value of u[i][j] are: \n\n");
    for (j = 0; j <= T - 3; j++)
    {
        for (i = 0; i <= x; i++)
        {
            printf("%10.4f\t", u[i][j]);
        }
        printf("\n");
    }
}

float fun(float y)
{
    return (0.5 * sin(y));
}







// ******OUTPUT******

// Enter the value of c: 0.5
// Enter the value of ut and ue: 0, 0

// the value of u[i][j] are:
// 0.0000	0.2938 	0.4754 	0.4757 	0.2944	0.0000
// 0.0000	0.2798 	0.4528	0.4530 	0.2803 	0.0000
// 0.0000 	0.2391 	0.3869	0.3871 	0.2392 	0.0000
// 0.0000 	0.1755 	0.2841 	0.2841 	0.1754 	0.0000
// 0.0000	0.0953	0.1542 	0.1540 	0.0948 	0.0000
// 0.0000	0.0059 	0.0095 	0.0091 	0.0054 	0.0000
//  







//  
//PROGRAM FOR Milne’s method

// #include <stdio.h>
// #include <math.h>
// #include <conio.h>

// int main()
// {
//     float x0, y0, xn, h, y1, y2, y3, yc, yp;
//     // x0 ,xn the initial and final value of x
//     // y0 ,y1,y2,y3 are starting value of y , h is the step length
//     float eps = 1e-5; // the error of tolerance
//     float x1, x2, x3, x4, f0, f1, f2, f3, yold;
//     float f(float x, float y);
//     float rk4(float x, float y, float h);

//     printf("Enter the initial value of x and y: ");
//     scanf("%f %f", &x0, &y0);

//     printf("Enter the last value of x: ");
//     scanf("%f", &xn);
    
//     printf("Enter the step length h: ");
//     scanf("%f", &h);
    
//     // initial value of y are computed using Runge-Kutta method
//     x1 = x0 + h;
//     x2 = x1 + h;
//     x3 = x2 + h;
//     y1 = rk4(x0, y0, h);
//     y2 = rk4(x1, y1, h);
//     y3 = rk4(x2, y2, h);
//     f1 = f(x1, y1);
//     f2 = f(x2, y2);
//     f3 = f(x3, y3);
    
    
//     printf("******OUTPUT******\n\n");
//     printf("the initial value of x and y: %.0f, %.0f\n", x0, y0);
//     printf("the last value of x: %.1f\n", xn);
//     printf("the step length h: %.1f\n", h);
    
//     printf("x- value y-value \n");
    
//     for (x4 = x3 + h; x4 <= xn; x4 += h)
//     {
//         yp = y0 + 4 * h * (2 * f1 - f2 + 2 * f3) / 3;
//         yold = yp;
//         yc = yp;

//         do
//         {
//             yold = yc;
//             yc = y2 + h * (f2 + 4 * f3 + f(x4, yold)) / 3;
//         } while ((yc - yold) > eps);

//         printf("%8.4f %8.5f\n", x4, yc);
//         y0 = y1;
//         y1 = y2;
//         y2 = y3;
//         y3 = yc;
//         f1 = f2;
//         f2 = f3;
//         f3 = f(x4, yc);
//     }
// }

// // DEFINITION OF THE FUNCTION f(x,y)
// float f(float x, float y)
// {
//     return (2 * x + y * y);
// }

// // The fourth oreder Runge-Kutta method
// float rk4(float x, float y, float h)
// {
//     float k1, k2, k3, k4;
//     k1 = h * f(x, y);
//     k2 = h * f(x + h / 2, y + k1 / 2);
//     k3 = h * f(x + h / 2, y + k2 / 2);
//     k4 = h * f(x + h, y + k3);
//     y = y + (k1 + 2 * (k2 + k3) + k4) / 6;
//     return (y);
// }
//  






// ******OUTPUT******

// Enter the initial value of x and y: 0, 1
// Enter the last value of x: 0.7
// Enter the step length h: 0.1

// x- value		 y-value
// 0.4000		1.91497

// 0.5000		2.48207

// 0.6000		3.45698
